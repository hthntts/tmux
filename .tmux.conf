# cat << EOF > /dev/null

# general ----------------------------------------------------------------------
set-option -g default-terminal "xterm-256color"
# set-option -g default-terminal "screen-256color"
# set -ga terminal-overrides ',screen-256color:Tc'
set -as terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[ q'
set -s escape-time 0          # faster command sequences
set -sg repeat-time 600       # increase repeat timeout
set -s focus-events on
setw -g xterm-keys on

unbind-key C-b
# set -g prefix 'M-/'
# bind-key 'M-/' send-prefix
set -g prefix `
bind-key ` send-prefix

set -g status-keys vi
setw -g mode-keys vi

set -q -g status-utf8 on      # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on
set -g history-limit 5000     # boost history
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename off  # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g set-titles-string "#T"
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 10     # redraw status line every 10 seconds
set -g monitor-activity on    # activity
set -g visual-activity off

bind - split-window -v        # split current window horizontally
bind / split-window -h        # split current window vertically
bind > swap-pane -D           # swap current pane with the next one
bind < swap-pane -U           # swap current pane with the previous one
bind C-c new-session          # create session
bind C-f command-prompt -p find-session 'switch-client -t %%' # find session

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n M-h  if-shell  "$is_vim"  "send-keys M-h"  "select-pane -L"
bind-key -n M-j  if-shell  "$is_vim"  "send-keys M-j"  "select-pane -D"
bind-key -n M-k  if-shell  "$is_vim"  "send-keys M-k"  "select-pane -U"
bind-key -n M-l  if-shell  "$is_vim"  "send-keys M-l"  "select-pane -R"
bind-key -n M-\  if-shell  "$is_vim"  "send-keys M-\\" "select-pane -l"

# # shift arrow to switch windows
bind -r Left previous-window
bind -r Right next-window

# window navigation
unbind n
unbind p
bind Tab last-window   # move to last active window

# copy mode
bind Enter copy-mode # enter copy mode

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

# plugin
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-resurrect'

# clipboard
set -g @yank_selection_mouse 'clipboard'

# enable mouse
set-option -g mouse on

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# maximize current pane
bind z run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# reload configuration
bind r source-file ~/.tmux.conf \; display '~/.tmux.conf sourced'

# edit configuration
bind e new-window -n "~/.tmux.conf" "nvim ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\""

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

if "test ! -d ~/.tmux/plugins/tpm" \
      "run 'git clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm'"
run '~/.tmux/plugins/tpm/tpm'

# EOF
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "Mouse: $new"
# }
#
# _uptime() {
#   case "$_uname_s" in
#     *Darwin*|*FreeBSD*)
#       boot=$(sysctl -q -n kern.boottime | awk -F'[ ,:]+' '{ print $4 }')
#       now=$(date +%s)
#       ;;
#     *Linux*|*CYGWIN*|*MSYS*|*MINGW*)
#       boot=0
#       now=$(cut -d' ' -f1 < /proc/uptime)
#       ;;
#     *OpenBSD*)
#       boot=$(sysctl -n kern.boottime)
#       now=$(date +%s)
#   esac
#   # shellcheck disable=SC1004
#   awk -v boot="$boot" -v now="$now" '
#     BEGIN {
#       uptime = now - boot
#       y = int(uptime / 31536000)
#       dy = int(uptime / 86400) % 365
#       d = int(uptime / 86400)
#       h = int(uptime / 3600) % 24
#       m = int(uptime / 60) % 60
#       s = int(uptime) % 60
#
#       system("tmux  set -g @uptime_y " y + 0 " \\; " \
#                    "set -g @uptime_dy " dy + 0 " \\; " \
#                    "set -g @uptime_d " d + 0 " \\; " \
#                    "set -g @uptime_h " h + 0 " \\; " \
#                    "set -g @uptime_m " m + 0 " \\; " \
#                    "set -g @uptime_s " s + 0)
#     }'
# }
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# "$@"
